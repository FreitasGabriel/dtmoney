{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","sumary","reduce","acc","type","deposits","amount","total","withdraw","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","e","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07e2eb13.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL: 'https://freitasgabriel.github.io/dtmoney\":3000/api',\n})\n","import { createContext, useState, useEffect, ReactNode, useContext } from \"react\"\n\nimport { api } from \"../services/api\";\n\ninterface Transaction {\n    id: number;\n    title: string;\n    amount: number;\n    category: string;\n    type: string;\n    createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>\n\ninterface TransactionsProviderProps {\n    children: ReactNode;\n}\n\ninterface TransactionsContextData {\n    transactions: Transaction[];\n    createTransaction: (transaction: TransactionInput) => Promise<void>\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n    {} as TransactionsContextData\n)\n\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n    const [transactions, setTransactions] = useState<Transaction[]>([])\n\n    useEffect(() => {\n        api.get('/transactions')\n            .then(response => setTransactions(response.data.transactions))\n    }, [])\n\n    async function createTransaction(transactionInput: TransactionInput) {\n        const response = await api.post('/transactions', {\n            ...transactionInput,\n            createdAt: new Date(),\n        })\n        const { transaction } = response.data;\n\n        setTransactions([...transactions, transaction])\n    }\n\n    return (\n        <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n            {children}\n        </TransactionsContext.Provider>\n    )\n}\n\nexport function useTransactions() {\n    const context = useContext(TransactionsContext)\n\n    return context\n}","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: -10rem;\n\n    div {\n        background: var(--shape);\n        padding: 1.5rem 2rem;\n        border-radius: 0.25rem;\n        color: var(--text-title);\n\n        header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n\n        strong {\n            display: block;\n            margin-top: 1rem;\n            font-size: 2rem;\n            font-weight: 500;\n            line-height: 3rem;\n        }\n\n        &.highlight-background{\n            background: var(--green);\n            color: var(--shape);\n        }\n    }\n`","import React, { useContext } from 'react';\nimport incomeImg from '../../assets/income.svg'\nimport outcomeImg from '../../assets/outcome.svg'\nimport totalImg from '../../assets/total.svg'\nimport { useTransactions } from '../../hooks/useTransactions'\n\nimport { Container } from './styles'\n\nexport function Summary() {\n\n    const { transactions } = useTransactions()\n\n    const sumary = transactions.reduce((acc, transaction) => {\n        if (transaction.type === 'deposit') {\n            acc.deposits += transaction.amount\n            acc.total += transaction.amount\n        } else {\n            acc.withdraw += transaction.amount\n            acc.total -= transaction.amount\n        }\n\n        return acc;\n    }, {\n        deposits: 0,\n        withdraw: 0,\n        total: 0,\n    })\n\n    return (\n        <Container>\n            <div>\n                <header>\n                    <p>Entradas</p>\n                    <img src={incomeImg} alt=\"Entradas\" />\n                </header>\n                <strong>\n                    {new Intl.NumberFormat('pt-br', {\n                        style: 'currency',\n                        currency: 'BRL',\n                    }).format(sumary.deposits)}\n                </strong>\n            </div>\n            <div>\n                <header>\n                    <p>Saídas</p>\n                    <img src={outcomeImg} alt=\"Saídas\" />\n                </header>\n                <strong>\n                    {new Intl.NumberFormat('pt-br', {\n                        style: 'currency',\n                        currency: 'BRL',\n                    }).format(sumary.withdraw)}\n                </strong>\n            </div>\n            <div className=\"highlight-background\">\n                <header>\n                    <p>Entradas</p>\n                    <img src={totalImg} alt=\"Total\" />\n                </header>\n                <strong>\n                    {new Intl.NumberFormat('pt-br', {\n                        style: 'currency',\n                        currency: 'BRL',\n                    }).format(sumary.total)}\n                </strong>\n            </div>\n        </Container>\n    )\n}","import styled from 'styled-components'\n\nexport const Container = styled.div`\n\n    margin-top: 4rem;\n\n    table { \n        width: 100%;\n        border-spacing: 0 0.5rem;\n\n        th {\n            color: var(--text-body);\n            font-weight: 400;\n            padding: 1rem 2rem;\n            text-align: left;\n            line-height: 1.5rem;\n        }\n\n        td {\n            padding: 1rem 2rem;\n            border: 0;\n            background: var(--shape);\n            color: var(--text-body);\n            border-radius: 0.25rem;\n\n            &:first-child{\n                color: var(--text-title)\n            }\n\n            &.deposit{\n                color: var(--green)\n            }\n\n            &.withdraw{\n                color: var(--red)\n            }\n        }\n\n        tbody {\n            tr {\n                transition: 0.2s;\n\n                &:hover{\n                    filter: brightness(0.8);\n                }\n            }\n        }\n    }\n`","import { useContext } from \"react\";\nimport { useTransactions } from \"../../hooks/useTransactions\"\nimport { Container } from \"./styles\";\n\nexport function TransactionsTable() {\n\n    const { transactions } = useTransactions()\n\n    return (\n        <Container>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Título</th>\n                        <th>Valor</th>\n                        <th>Categoria</th>\n                        <th>Data</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {transactions.map((transaction) => {\n                        return (\n                            <tr key={transaction.id}>\n                                <td>{transaction.title}</td>\n                                <td className={transaction.type}>\n                                    {new Intl.NumberFormat('pt-br', {\n                                        style: 'currency',\n                                        currency: 'BRL',\n                                    }).format(transaction.amount)}\n                                </td>\n                                <td>{transaction.category}</td>\n                                <td>\n                                    {new Intl.DateTimeFormat('pt-br').format(new Date(transaction.createdAt))}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </Container>\n    )\n}","import styled from 'styled-components'\n\nexport const Container = styled.main`\n    max-width: 1120px;\n    margin: 0 auto;\n    padding: 2.5rem 1rem;\n`","import { Summary } from '../Summary'\nimport { TransactionsTable } from '../TransactionsTable'\nimport { Container } from './styles'\n\nexport function Dashboard() {\n    return (\n        <Container>\n            <Summary />\n            <TransactionsTable />\n        </Container>\n    )\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components'\n\nexport const Container = styled.header`\n    background: var(--blue);\n`\n\nexport const Content = styled.div`\n    max-width: 1120px;\n    margin: 0 auto;\n\n    padding: 2rem 1rem 12rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button{\n        font-size: 1rem;\n        color: var(--shape);\n        background: var(--blue-light);\n        border: 0;\n        padding: 0 2rem;\n        border-radius: 0.25rem;\n        height: 3rem;\n\n        transition: filter 0.2s;\n\n        &:hover{\n            filter: brightness(0.9);\n        }\n    }\n\n    \n`","import logoImg from \"../../assets/logo.svg\"\nimport { Container, Content } from \"./styles\"\n\ninterface HeaderProps {\n    onOpenNewTransactionModal: () => void\n}\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n\n\n    return (\n        <Container>\n            <Content>\n                <img src={logoImg} alt=\"dt money\" />\n                <button type=\"button\" onClick={onOpenNewTransactionModal}>\n                    Nova Transação\n                </button>\n\n\n            </Content>\n        </Container>\n    )\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from 'styled-components'\nimport { darken, transparentize } from 'polished'\n\nexport const Container = styled.form`\n\n    border: none;\n\n    h2 { \n        color: var(--text-title);\n        font-size: 1.5rem;\n        margin-bottom: 2rem;\n    }\n\n    input {\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        border-radius: 0.25rem;\n        \n        border: 1px solid #D7D7D7;\n        background: #E7E9EE;\n\n        font-weight: 400;\n        font-size: 1rem;\n\n        &::placeholder {\n            color: var(--text-body);\n        }\n\n        & + input { //TODO IMPUT QUE TIVER UM INPUT EM CIMA, VAI TER AS PROPS ABAIXO\n            margin-top: 1rem;\n        }\n    }\n\n    button[type=\"submit\"] {\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        background: var(--green);\n        color: #FFFFFF;\n        border-radius: 0.25rem;\n        border: 0;\n        font-size: 1rem;\n        margin-top: 1.5rem;\n        font-weight: 600;\n        \n        transition: 0.2s;\n        &:hover{\n            filter: brightness(0.9);\n        }\n    }\n`\n\nexport const TransactionTypeContainer = styled.div`\n    margin: 1rem 0;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n\n    \n`\n\nconst colors = {\n    green: '#33CC95',\n    red: '#E52E4D'\n}\n\ninterface RadioBoxProps {\n    isActive: boolean;\n    activeColor: 'green' | 'red';\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n\n    height: 4rem;\n    border: 1px solid #D7D7D7;\n    border-radius: 0.25rem;\n\n    background: ${props => props.isActive\n        ? transparentize(0.9, colors[props.activeColor])\n        : 'transparent'};\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    transition: border-color 0.2s;\n\n    &:hover {\n        border-color: ${darken(0.1, '#D7D7D7')};\n    }\n\n    img {\n        width: 20px;\n        height: 20px;\n    }\n\n    span{\n        display: inline-block;\n        margin-left: 1rem;\n        font-size: 1rem;\n        color: var(--text-title);\n    }\n    \n`","import { useState, FormEvent, useContext } from 'react'\nimport Modal from 'react-modal'\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport { api } from '../../services/api';\nimport { useTransactions } from '../../hooks/useTransactions';\nimport { Container, TransactionTypeContainer, RadioBox } from \"./styles\";\n\ninterface NewTransactionModalProps {\n    isOpen: boolean;\n    onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps) {\n\n    const { createTransaction } = useTransactions()\n\n    const [title, setTitle] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [category, setCategory] = useState('');\n    const [type, setType] = useState('deposit')\n\n    async function handleCreateNewTransaction(e: FormEvent) {\n        e.preventDefault()\n\n        await createTransaction({\n            title, amount, category, type\n        })\n\n        onRequestClose()\n        setTitle('')\n        setAmount(0)\n        setCategory('')\n        setType('deposit')\n    }\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n            overlayClassName=\"react-modal-overlay\"\n            className=\"react-modal-content\"\n        >\n            <button\n                className=\"react-modal-close\"\n                type=\"button\"\n                onClick={onRequestClose}\n            >\n                <img src={closeImg} alt=\"Fechar modal\" />\n            </button>\n\n            <Container onSubmit={handleCreateNewTransaction}>\n                <h2>Cadastrar Transação</h2>\n\n                <input\n                    placeholder=\"Título\"\n                    value={title}\n                    onChange={e => setTitle(e.target.value)}\n                />\n                <input\n                    type=\"number\"\n                    placeholder=\"Valor\"\n                    value={amount}\n                    onChange={e => setAmount(Number(e.target.value))}\n                />\n\n                <TransactionTypeContainer>\n                    <RadioBox\n                        type=\"button\"\n                        onClick={() => setType('deposit')}\n                        isActive={type === 'deposit'}\n                        activeColor=\"green\"\n                    >\n                        <img src={incomeImg} alt=\"Entrada\" />\n                        <span>Entrada</span>\n                    </RadioBox>\n\n                    <RadioBox\n                        type=\"button\"\n                        onClick={() => setType('withdraw')}\n                        isActive={type === 'withdraw'}\n                        activeColor=\"red\"\n                    >\n                        <img src={outcomeImg} alt=\"Saída\" />\n                        <span>Saída</span>\n                    </RadioBox>\n                </TransactionTypeContainer>\n\n                <input\n                    placeholder=\"Categoria\"\n                    value={category}\n                    onChange={e => setCategory(e.target.value)}\n                />\n                <button type=\"submit\">\n                    Cadastrar\n                </button>\n            </Container>\n        </Modal>\n    )\n}","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    \n    :root {\n        --background: #F0F2F5;\n        --shape: #FFFFFF;\n\n        --red: #E52E4D;\n        --green: #33CC95;\n        --blue: #5429CC;\n\n        --blue-light: #6933FF;\n        --text-title: #363F5F;\n        --text-body: #969CB3;\n\n    }\n    \n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    //font-size: 16px - padrão(Desktop)\n    html { \n        @media(max-width: 1080px){\n            font-size: 93.75%; // Vai fazer com que o font-size tenha 15px\n        }\n\n        @media(max-width: 720px){\n            font-size: 87.5%; // Vai fazer com que o font-size tenha 14px\n        }\n    }\n\n    // REM = 1rem = font-size padrão da página. \n\n    body {\n        background: var(--background);\n        -webkit-font-smoothing: antialiased; \n    }\n\n    body, input, textarea, button {\n        font-family: 'Poppins', sans-serif;\n        font-weight: 400;\n    }\n\n    h1, h2, h3, h4, h5, h6, strong{\n        font-weight: 600;\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n    [disabled] {\n        opacity: 0.6;\n        cursor: not-allowed;\n    }\n\n    .react-modal-overlay{\n        background: rgba(0, 0, 0, 0.5);\n\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .react-modal-content{\n        width: 100%;\n        max-width: 576px;\n        background: var(--background);\n        padding: 3rem;\n        position: relative;\n        border-radius: 0.25rem;\n\n    }\n\n    .react-modal-close{\n        position: absolute;\n        right: 1.5rem;\n        top: 1.5rem;\n        border: 0;\n        background: transparent;\n\n        transition: 0.2s;\n\n        &:hover{\n            filter: brightness(0.8);\n        }\n    }\n;\n\n`\n\n","import { useState } from 'react';\nimport Modal from 'react-modal';\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from './components/NewTransactionModal';\n\nimport { GlobalStyle } from \"./styles/global\"\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nModal.setAppElement('#root')\n\nexport default function App() {\n\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false)\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true)\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false)\n  }\n\n  return (\n    <TransactionsProvider >\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs'\nimport App from './App';\n\ncreateServer({\n\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [{\n        id: 1,\n        title: 'Freelance de website',\n        type: 'deposit',\n        category: 'dev',\n        amount: 6000,\n        createdAt: new Date('2021-02-12 09:00:00')\n      }, {\n        id: 2,\n        title: 'Aluguel',\n        type: 'withdraw',\n        category: 'casa',\n        amount: 1000,\n        createdAt: new Date('2021-02-14 09:00:00')\n      }],\n    })\n  },\n\n  routes() {\n    this.namespace = 'api'\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n\n      return schema.create('transaction', data)\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}